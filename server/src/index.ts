import express from 'express';
import cors from 'cors';
import morgan from 'morgan';
import dotenv from 'dotenv';
import { PrismaClient } from '@prisma/client';

// Load environment variables first
dotenv.config();

// Initialize Sentry (must be before other imports)
import { initSentry, requestHandler, tracingHandler, errorHandler, Sentry } from './sentry';
initSentry();

// Import database from centralized location
import { prisma } from './lib/prisma';

// Import routes
import authRoutes from './routes/auth.routes';
import userRoutes from './routes/user.routes';
import workoutRoutes from './routes/workout.routes';
import scheduleRoutes from './routes/schedule.routes';
import defaultScheduleRoutes from './routes/defaultSchedule.routes';
import supplementalWorkoutRoutes from './routes/supplementalWorkout.routes';

// Initialize Express app
const app = express();
const PORT = process.env.PORT || 3001;

// Sentry request handler must be the first middleware
app.use(requestHandler);

// Optional: Sentry tracing middleware
app.use(tracingHandler);

// Middleware
app.use(cors());
app.use(express.json());
app.use(morgan('dev'));

// Routes
app.get('/', (req, res) => {
  res.json({ message: 'TFW MMA Lifting API' });
});

// Import admin routes
import adminRoutes from './routes/admin.routes';

// API Routes
app.use('/api/auth', authRoutes);
app.use('/api/users', userRoutes);
app.use('/api/workouts', workoutRoutes);
app.use('/api/schedule', scheduleRoutes);
app.use('/api/default-schedule', defaultScheduleRoutes);
app.use('/api/supplemental-workouts', supplementalWorkoutRoutes);
app.use('/api/admin', adminRoutes);

// Error test endpoint
app.post('/api/generate-503-error', (req, res, next) => {
  // Generate an actual error that Sentry can capture
  const testError = new Error('Test 503 error generated by the error test page');
  testError.name = 'ServiceUnavailableError';
  
  // Manually capture with Sentry before responding
  if (process.env.SENTRY_DSN) {
    console.log('Capturing 503 error with Sentry...');
    const eventId = Sentry.captureException(testError, {
      tags: {
        test: true,
        endpoint: '/api/generate-503-error'
      },
      extra: {
        requestBody: req.body,
        userAgent: req.get('User-Agent')
      }
    });
    console.log('503 error captured by Sentry with event ID:', eventId);
    
    // Force flush to ensure error is sent immediately
    Sentry.flush(2000).then(() => {
      console.log('Sentry flush completed');
    }).catch(err => {
      console.log('Sentry flush failed:', err);
    });
  } else {
    console.log('Sentry not configured, 503 error not captured');
  }
  
  res.status(503).json({
    error: 'Service Unavailable',
    message: 'This is a test 503 error generated by the error test page'
  });
});

// Additional test endpoint that throws an actual error
app.post('/api/generate-thrown-error', (req, res, next) => {
  const error = new Error('This is a thrown error for Sentry testing');
  error.name = 'ThrownTestError';
  next(error); // This will be caught by error handler middleware
});

// Sentry error handler must be before other error handlers
app.use(errorHandler);

// Error handling middleware
app.use((err: any, req: express.Request, res: express.Response, next: express.NextFunction) => {
  console.error(err.stack);
  res.status(500).json({
    error: 'Internal Server Error',
    message: process.env.NODE_ENV === 'development' ? err.message : undefined
  });
});

// Start server with error handling
const server = app.listen(PORT, () => {
  console.log(`Server running on port ${PORT}`);
});

// Handle port already in use error
server.on('error', (err: any) => {
  if (err.code === 'EADDRINUSE') {
    console.error(`Port ${PORT} is already in use. Please:`);
    console.error(`1. Kill the existing process: lsof -ti:${PORT} | xargs kill -9`);
    console.error(`2. Or use a different port by setting PORT environment variable`);
    process.exit(1);
  } else {
    console.error('Server error:', err);
    process.exit(1);
  }
});

// Handle database connections and cleanup
process.on('SIGINT', async () => {
  console.log('Received SIGINT, closing server gracefully...');
  server.close(() => {
    console.log('Server closed');
    prisma.$disconnect().then(() => {
      console.log('Database disconnected');
      process.exit();
    });
  });
});

process.on('SIGTERM', async () => {
  console.log('Received SIGTERM, closing server gracefully...');
  server.close(() => {
    console.log('Server closed');
    prisma.$disconnect().then(() => {
      console.log('Database disconnected');
      process.exit();
    });
  });
});