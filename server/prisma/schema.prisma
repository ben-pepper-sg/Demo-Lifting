generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id               String            @id @default(uuid())
  email            String            @unique
  passwordHash     String
  firstName        String
  lastName         String
  role             UserRole          @default(USER)
  maxBench         Float?
  maxOHP           Float?
  maxSquat         Float?
  maxDeadlift      Float?
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
  resetToken       String?
  resetTokenExpiry DateTime?
  bookings         Booking[]
  defaultSchedules DefaultSchedule[] @relation("Coach")
  coached          Schedule[]        @relation("Coach")
}

model Program {
  id          String          @id @default(uuid())
  name        String
  description String?
  weeks       Int
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt
  schemes     WorkoutScheme[]
}

model WorkoutScheme {
  id                   String   @id @default(uuid())
  programId            String
  week                 Int
  day                  Int
  liftType             LiftType
  sets                 Int[]
  reps                 Int[]
  percentages          Float[]
  restTime             Int
  supplementalWorkouts String[]
  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt
  program              Program  @relation(fields: [programId], references: [id])
}

model SupplementalWorkout {
  id          String          @id @default(uuid())
  name        String
  category    WorkoutCategory
  bodyPart    BodyPart
  description String?
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt
  exercises   Exercise[]      @relation("WorkoutExercises")
}

model Exercise {
  id                    String              @id @default(uuid())
  name                  String
  description           String?
  supplementalWorkoutId String
  createdAt             DateTime            @default(now())
  updatedAt             DateTime            @updatedAt
  supplementalWorkout   SupplementalWorkout @relation("WorkoutExercises", fields: [supplementalWorkoutId], references: [id], onDelete: Cascade)
}

model Schedule {
  id                  String    @id @default(uuid())
  date                DateTime
  time                String
  capacity            Int       @default(8)
  currentParticipants Int       @default(0)
  coachId             String
  workoutType         LiftType
  createdAt           DateTime  @default(now())
  updatedAt           DateTime  @updatedAt
  bookings            Booking[]
  coach               User      @relation("Coach", fields: [coachId], references: [id])
}

model Booking {
  id          String    @id @default(uuid())
  scheduleId  String
  userId      String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  workoutType LiftType?
  schedule    Schedule  @relation(fields: [scheduleId], references: [id])
  user        User      @relation(fields: [userId], references: [id])
}

model WorkoutLog {
  id        String   @id @default(uuid())
  userId    String
  liftType  String
  weight    Float
  reps      Int
  sets      Int
  date      DateTime
  notes     String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model DefaultSchedule {
  id          String   @id @default(uuid())
  dayOfWeek   Int
  time        String
  capacity    Int      @default(8)
  workoutType LiftType
  isActive    Boolean  @default(true)
  coachId     String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  coach       User     @relation("Coach", fields: [coachId], references: [id])
}

enum UserRole {
  USER
  ADMIN
  COACH
}

enum LiftType {
  UPPER
  LOWER
}

enum WorkoutCategory {
  UPPER
  LOWER
}

enum BodyPart {
  BICEPS
  TRICEPS
  BACK
  SHOULDERS
  CHEST
  CALVES
  QUADS
  HAMSTRINGS
  GLUTES
}
